{"version":3,"sources":["Poster/index.js","MoviesList/index.js","Grid/index.js","DetailsPage/index.js","SearchPage/index.js","App.js","serviceWorker.js","index.js"],"names":["Poster","string","movie","this","props","posterUrl","poster_path","to","pathname","id","state","style","textDecoration","margin","className","backgroundImage","backgroundRepeat","backgroundSize","overflow","title","length","substring","processDetails","overview","vote_average","React","Component","MoviesList","isLoading","movies","getPosters","then","setTimeout","console","log","movieUrl","fetch","undefined","moviesList","json","results","items","i","push","posterurl","rating","genre_ids","setState","fromSearchPage","Grid","DetailsPage","componentDidMount","a","match","params","backdrop_path","src","alt","tagline","SearchPage","searchQuery","query","e","target","value","endpoint","autoFocus","type","aria-label","onChange","changeQuery","onClick","searchMovies","key","trim","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0769a1d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Poster extends React.Component {\r\n    render() {\r\n        let movie = this.props.movie;\r\n        let posterUrl = 'http://image.tmdb.org/t/p/w185' + movie.poster_path;\r\n        return (\r\n            <Link to={\r\n                {pathname:`/detailsPage/${movie.id}`,\r\n                    state: {\r\n                        movie: movie,\r\n                    }\r\n                }\r\n            }\r\n                  style={{ textDecoration: 'none', margin: '8px 16px' }}\r\n            >\r\n                <div className='poster'\r\n                     style={{\r\n                    backgroundImage: 'url(' + posterUrl + ')',\r\n                    backgroundRepeat: 'no-repeat',\r\n                    backgroundSize: 'cover',\r\n                    overflow: 'hidden',\r\n                }}>\r\n                    <div className='details'>\r\n                        <h4 className='title'>\r\n                            {processTitle(movie.title)}\r\n                        </h4>\r\n                        <div className='overview-rating'>\r\n                            <p className= \"overview\">{processDetails(movie.overview)}</p>\r\n\r\n                            <div className='rating'>\r\n                                {movie.vote_average}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n}\r\n\r\nfunction processDetails(string){\r\n    return `${(string.length > 100) ? string.substring(0,100) + '...' : string}\\nRead More`;\r\n}\r\n\r\nfunction processTitle(string){\r\n    return `${(string.length > 45) ? string.substring(0,45) + '...' : string}`;\r\n}\r\n\r\nexport default (Poster);","import Poster from \"../Poster\"\r\nimport React from \"react\"\r\nimport './style.css';\r\n\r\nclass MoviesList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isLoading : true,\r\n            movies : null,\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getPosters().then();\r\n    }\r\n\r\n    async getPosters() {\r\n        setTimeout(function () {}, 3000);\r\n        let mainPageLink = 'https://api.themoviedb.org/3/discover/movie?api_key=a68598b6e3e81567486644082b967d8f';\r\n        console.log(this.props.movieUrl === null, this.props.movieUrl );\r\n        let moviesList = await fetch((this.props.movieUrl === undefined || this.props.movieUrl === null) ? mainPageLink : this.props.movieUrl);\r\n        moviesList = (await moviesList.json()).results;\r\n        console.log(moviesList.length);\r\n        let items = [];\r\n        for(let i = 0; i < moviesList.length; i++){\r\n            items.push(<Poster\r\n                posterurl = {'http://image.tmdb.org/t/p/w185' + moviesList[i].poster_path}\r\n                title = {moviesList[i].title}\r\n                rating = {moviesList[i].genre_ids[1]}\r\n                overview = {moviesList[i].overview}\r\n                movie = {moviesList[i]}\r\n                />);\r\n        }\r\n        this.setState({\r\n            isLoading: false,\r\n            movies: items,\r\n        });\r\n    }\r\n\r\n    render (){\r\n        if(this.props.movieUrl === undefined && this.props.fromSearchPage){\r\n            return <div className={'search-something'}>Search Something</div>\r\n        }\r\n\r\n            else if(this.state.isLoading) {\r\n                return (\r\n                <div  className={'loading-page'}>\r\n                    <div className=\"spinner\"/>\r\n                </div>\r\n            );\r\n            }\r\n        else if(this.state.movies.length === 0) return <div className={'search-something'}>Nothing found</div>;\r\n\r\n        else{\r\n                return (\r\n                        <div className = \"movie-list\">\r\n                            {this.state.movies}\r\n                        </div>\r\n                )\r\n            }\r\n    }\r\n}\r\n\r\nexport default (MoviesList);\r\n\r\n\r\n// https://api.themoviedb.org/3/discover/movie?api_key=a68598b6e3e81567486644082b967d8f&sort_by=revenue.desc","import React from \"react\";\r\nimport MoviesList from \"../MoviesList\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n                <div className={'main-body'}>\r\n                        <Link to={`/search`} className={'search-bar'}>\r\n                            Search\r\n                        </Link>\r\n                        <MoviesList fromSearchPage = {false}/>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from \"react\";\r\nimport './style.css';\r\n\r\nexport default class DetailsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            movie: undefined,\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        let id = this.props.match.params.id;\r\n        let movie;\r\n        let a = await fetch(\"https://api.themoviedb.org/3/movie/\" + id + \"?api_key=a68598b6e3e81567486644082b967d8f\");\r\n        movie = (await a.json());\r\n        this.setState({\r\n            movie: movie,\r\n        });\r\n        console.log('MovieData: ', movie);\r\n    };\r\n\r\n    render() {\r\n        return this.state.movie === undefined ?\r\n            <div>Loading...</div> :\r\n            <div className='main-boy'\r\n                 style={{\r\n                     backgroundImage: `url(https://image.tmdb.org/t/p/original${this.state.movie.backdrop_path})`\r\n                 }}>\r\n                <div className={'detail-content'}>\r\n                    <img src={'http://image.tmdb.org/t/p/w185' + this.state.movie.poster_path} alt=\"\"\r\n                         className={'poster-detail'}/>\r\n                    <div className={'details-overview'}>\r\n                        <div className={'detail-title'}>\r\n                            {this.state.movie.title}\r\n                        </div>\r\n                        <div className={'detail-tagline'}>\r\n                            {this.state.movie.tagline}\r\n                        </div>\r\n                        <div className={'detail-overview'}>\r\n                            {this.state.movie.overview}\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    }\r\n}","import './style.css'\r\nimport React from 'react';\r\nimport MoviesList from \"../MoviesList\";\r\n\r\nexport default class SearchPage extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchQuery: '',\r\n            query: '',\r\n        }\r\n    }\r\n\r\n    changeQuery (e){\r\n        let query = e.target.value;\r\n        console.log(query);\r\n        this.setState({\r\n            searchQuery: query,\r\n        })\r\n    }\r\n\r\n    searchMovies(){\r\n        this.setState({\r\n            query: this.state.searchQuery,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const api = `&api_key=a68598b6e3e81567486644082b967d8f`;\r\n        let endpoint = `https://api.themoviedb.org/3/search/movie?query=${this.state.searchQuery}${api}`;\r\n\r\n        return (\r\n            <div className={'main-body'}>\r\n                    <div >\r\n                        <input className={'search-bar'}\r\n                        autoFocus=\"autofocus\"\r\n                        type={'text'} title={'Search'}\r\n                        aria-label={'Search'}\r\n                        onChange={(e) => this.changeQuery(e)}/>\r\n                        <button className={'search-button'}\r\n                        onClick={() => this.searchMovies()}>\r\n                            Search</button>\r\n                    </div>\r\n\r\n                <MoviesList key = {this.state.query} fromSearchPage = {true} movieUrl = {this.state.query.trim() === '' ? undefined : endpoint}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Grid from'./Grid'\r\nimport DetailsPage from './DetailsPage'\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport SearchPage from \"./SearchPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path={\"/detailsPage/:id/\"} component = {DetailsPage} />\r\n        <Route path={\"/search/\"} component={SearchPage} />\r\n        <Route path={\"/\"} component = {Grid} />\r\n      </Switch>\r\n\r\n    </Router>\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}